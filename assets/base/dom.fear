package base

// Minimal DOM-like API
Document: Sealed{
  mut .getElementById(id: Str): mut Opt[Element] -> Magic!,
  mut .createElement(tag: Str): mut Element -> Magic!,
  mut .waitCompletion:Void -> Magic!,//wait until the DOM is over
}

Element: Sealed{
  read .value: Str -> Magic!,
  mut .setValue(v: Str): Void -> Magic!,
  mut .setText(v: Str): Void -> Magic!,
  mut .appendChild(child: mut Element): Void -> Magic!,
  mut .toggleClass(name: Str): Void -> Magic!,
  mut .remove: Void -> Magic!,
  mut .focus: Void -> Magic!,
  mut .onClickEditDom(callBack: F[Event,mut Document,Void] ): Void -> Magic!,
  // mut .onClickObservesFearless(callBack: read F[Event,mut Document,Void] ): Void -> Magic!,
  // mut .onClickFreedom(callBack: mut MF[Event,mut Document,Void] ): Void -> Magic!,//broken
  // mut .onClickResult[R](result: mut R, callBack: F[Event,mut Document,mut R,Void] ): Void -> Magic!,//broken
  // .onKeyPress: Block[Void] -> Magic!,
}

Event: Sealed{
  read .eventType: Str -> Magic!,
  read .target: Element -> Magic!,
  read .key: Str -> Magic!,
}
